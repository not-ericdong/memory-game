{"version":3,"sources":["components/header.js","components/score.js","components/game.js","App.js","index.js"],"names":["Header","className","Score","useState","score","time","setTime","tick","prevTime","useEffect","timer","setInterval","clearInterval","onClick","Game","pictureCards","setPictureCards","fetch","then","res","json","arrayShuffled","x","length","y","Math","floor","random","temp","shuffle","arrayDup","secondArray","push","duplicate","message","map","dog","index","document","getElementsByClassName","String","classList","toggle","reveal","id","type","src","alt","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"yNAeeA,MAbf,WACE,OACE,sBAAKC,UAAU,QAAf,UACE,sDAGA,mBAAGA,UAAU,eAAb,4D,OCmBSC,MAzBf,WAAkB,IAAD,EACYC,mBAAS,GADrB,mBACPC,EADO,aAEUD,mBAAS,IAFnB,mBAEPE,EAFO,KAEDC,EAFC,KAYd,SAASC,IACND,GAAQ,SAAAE,GAAQ,OAAIA,EAAW,KAGlC,OAZAC,qBAAU,WACP,IAAIC,EAAQC,aAAa,kBAAMJ,MAAQ,KAEvC,OAAO,WACJK,cAAcF,MAEjB,CAACL,IAOD,gCACG,oBAAGJ,UAAU,QAAb,qBAA8BG,EAA9B,OACA,wBAAQS,QAASN,EAAjB,mBACA,oBAAGN,UAAU,QAAb,mBAA4BI,SCwCtBS,MA5Df,WAAiB,IAAD,EAC2BX,mBAAS,IADpC,mBACNY,EADM,KACQC,EADR,OAE2Bb,mBAAS,GAFpC,mBA2Cb,OA3Ca,UAIbM,qBAAU,WACPQ,MAAM,mDACFC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GAAI,OAAIJ,EAGpB,SAAiBK,GACd,IAAK,IAAIC,EAAID,EAAcE,OAAO,EAAGD,EAAI,EAAGA,IAAK,CAC9C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,SAAWL,GAC/BM,EAAOP,EAAcC,GAC3BD,EAAcC,GAAKD,EAAcG,GACjCH,EAAcG,GAAKI,EAEtB,OAAOP,EAV0BQ,CAapC,SAAmBC,GAEhB,IADA,IAAIC,EAAc,GACTT,EAAE,EAAGA,EAAEQ,EAASP,OAAQD,IAC9BS,EAAYC,KAAKF,EAASR,IAC1BS,EAAYC,KAAKF,EAASR,IAE7B,OAAOS,EAnBkCE,CAAUb,EAAKc,gBACxD,IAoCA,qBAAKjC,UAAU,OAAf,SACIc,EAAaoB,KAAI,SAACC,EAAKC,GAAN,OACf,wBAAQxB,QAAS,kBAjB1B,SAAgBwB,GACCC,SAASC,uBAAuB,QAAQC,OAAOH,IACrD,GAAGI,UAAUC,OAAO,UAeCC,CAAON,IAA9B,SACG,qBACApC,UAAW,eAAeuC,OAAOH,GACjCO,GAAG,OACHC,KAAK,QACLC,IAAKV,EACLW,IAAI,aCrCJC,MAZf,WACE,OACE,sBAAK/C,UAAU,MAAf,UACE,cAAC,EAAD,IACA,sBAAKA,UAAU,OAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,WCLRgD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFb,SAASc,eAAe,W","file":"static/js/main.dfb6f680.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"title\">\r\n      <h1>\r\n        Memory matching game\r\n      </h1>\r\n      <p className=\"instructions\">\r\n        Click on all the matching pictures to win.\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, {useState, useEffect} from \"react\";\r\n\r\nfunction Score() {\r\n   const [score, setScore] = useState(0);\r\n   const [time, setTime] = useState(0);\r\n\r\n   useEffect(() => {\r\n      var timer = setInterval( () => tick(), 1000);\r\n\r\n      return function cleanup() {\r\n         clearInterval(timer)\r\n      };\r\n   }, [time]);\r\n\r\n   function tick() {\r\n      setTime(prevTime => prevTime + 1);\r\n   }\r\n\r\n   return (\r\n      <div>\r\n         <p className=\"score\">Clicks: {score} </p>\r\n         <button onClick={tick}>START</button>\r\n         <p className=\"timer\">Time: {time}</p>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Score;\r\n","import React, {useState, useEffect} from \"react\";\r\n\r\nfunction Game() {\r\n   const [pictureCards, setPictureCards] = useState([]);\r\n   const [clickCounter, setClickCounter] = useState(0);\r\n\r\n   useEffect(() => {\r\n      fetch(`https://dog.ceo/api/breed/corgi/images/random/8`)\r\n         .then(res => res.json())\r\n         .then(json => setPictureCards(shuffle(duplicate(json.message))))\r\n   }, [])\r\n\r\n   function shuffle(arrayShuffled) {\r\n      for (let x = arrayShuffled.length-1; x > 0; x--) {\r\n         const y = Math.floor(Math.random() * x)\r\n         const temp = arrayShuffled[x]\r\n         arrayShuffled[x] = arrayShuffled[y]\r\n         arrayShuffled[y] = temp\r\n      }\r\n      return arrayShuffled\r\n   }\r\n\r\n   function duplicate(arrayDup) {\r\n      let secondArray = []\r\n      for (let x=0; x<arrayDup.length; x++){\r\n         secondArray.push(arrayDup[x]);\r\n         secondArray.push(arrayDup[x]);\r\n      }\r\n      return secondArray\r\n   }\r\n\r\n   function reveal(index) {\r\n      let element = document.getElementsByClassName('index'+String(index));\r\n      element[0].classList.toggle('hidden');\r\n   };\r\n   \r\n\r\n   //function to get class and src of img\r\n\r\n   //if two clicks match -> keeps them open \r\n   //if they dont match wait 1 sec and hide both of them again\r\n   function ifMatch(firstClick, secondClick) {\r\n      document.getElementsByClassName();\r\n   }\r\n\r\n   return (\r\n      <div className=\"game\">\r\n         {pictureCards.map((dog, index) => (\r\n            <button onClick={() => reveal(index)}>\r\n               <img\r\n               className={'hidden index'+String(index)} \r\n               id=\"dogs\" \r\n               type=\"image\" \r\n               src={dog} \r\n               alt=\"\"\r\n               />\r\n            </button>\r\n         ))}\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default Game;\r\n","import './App.css'\nimport Header from './components/header';\nimport Score from './components/score';\nimport Game from './components/game'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"body\">\n        <Score /> \n        <Game />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}